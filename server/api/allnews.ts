import { defineEventHandler, getQuery } from 'h3'
import { parseStringPromise } from 'xml2js'
import fetch from 'node-fetch'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS
async function fetchRSSFeed(url: string, sourceName: string) {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º RSS: ${url}`)
    
    const res = await fetch(url)
    const xml = await res.text()

    const json = await parseStringPromise(xml, {
      explicitArray: false,
      mergeAttrs: true,
    })

    const rawItems = json.rss.channel.item
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ ${sourceName}: ${Array.isArray(rawItems) ? rawItems.length : 1}`)

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    const items = Array.isArray(rawItems) ? rawItems : [rawItems]
    const normalizedItems = items.map(item => ({
      title: item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      description: item.description || '',
      link: item.link || item.guid || '',
      pubDate: item.pubDate || new Date().toISOString(),
      source: sourceName,
      enclosure: item.enclosure || null
    }))

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    normalizedItems.sort((a, b) => new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime())
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π ${sourceName}: ${normalizedItems.length}`)
    return normalizedItems

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${sourceName}:`, error.message)
    return []
  }
}

export default defineEventHandler(async (event) => {
  console.log('=== üì∞ ALLNEWS API CALLED ===')
  
  const query = getQuery(event)
  const page = Number(query.page) || 1
  const perPage = Number(query.perPage) || 4
  const itemsPerSource = Math.floor(perPage / 2) // –ü–æ 2 –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

  console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { page, perPage, itemsPerSource })

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É RSS...')
    const [lentaNews, mosNews] = await Promise.all([
      fetchRSSFeed('https://lenta.ru/rss', 'lenta'),
      fetchRSSFeed('https://www.mos.ru/rss', 'mos')
    ])

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏: Lenta=${lentaNews.length}, MOS=${mosNews.length}`)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
    const startIndex = (page - 1) * itemsPerSource
    const lentaSlice = lentaNews.slice(startIndex, startIndex + itemsPerSource)
    const mosSlice = mosNews.slice(startIndex, startIndex + itemsPerSource)

    console.log(`üîç –ü–∞–≥–∏–Ω–∞—Ü–∏—è: startIndex=${startIndex}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ ${itemsPerSource} –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`)
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: Lenta=${lentaNews.length}, MOS=${mosNews.length}`)
    console.log(`üìÑ –í–∑—è–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}: Lenta[${startIndex}:${startIndex + itemsPerSource}], MOS[${startIndex}:${startIndex + itemsPerSource}]`)

    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: –≤–∑—è–ª–∏ Lenta=${lentaSlice.length}, MOS=${mosSlice.length}`)

    // –ß–µ—Ä–µ–¥—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏: –õ–µ–Ω—Ç–∞ -> –ú–û–° -> –õ–µ–Ω—Ç–∞ -> –ú–û–°
    const result = []
    const maxLength = Math.max(lentaSlice.length, mosSlice.length)
    
    for (let i = 0; i < maxLength; i++) {
      if (lentaSlice[i]) result.push(lentaSlice[i])
      if (mosSlice[i]) result.push(mosSlice[i])
    }

    console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${result.length} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}`)
    console.log(`üìä –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: maxPages = Math.ceil(Math.max(${lentaNews.length}, ${mosNews.length}) / ${itemsPerSource}) = ${Math.ceil(Math.max(lentaNews.length, mosNews.length) / itemsPerSource)}`)

    const response = {
      items: result,
      page,
      perPage,
      totalLenta: lentaNews.length,
      totalMos: mosNews.length,
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º, –∞ –Ω–µ –º–∏–Ω–∏–º—É–º
      maxPages: Math.ceil(Math.max(lentaNews.length, mosNews.length) / itemsPerSource),
      debug: {
        startIndex,
        itemsPerSource,
        lentaSliceLength: lentaSlice.length,
        mosSliceLength: mosSlice.length,
        resultLength: result.length,
        canLoadMore: (startIndex + itemsPerSource < Math.max(lentaNews.length, mosNews.length)),
        maxPagesCalc: `Math.ceil(Math.max(${lentaNews.length}, ${mosNews.length}) / ${itemsPerSource}) = ${Math.ceil(Math.max(lentaNews.length, mosNews.length) / itemsPerSource)}`
      }
    }

    return response

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API:', error)
    
    return {
      items: [],
      page,
      perPage,
      totalLenta: 0,
      totalMos: 0,
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }
  }
})